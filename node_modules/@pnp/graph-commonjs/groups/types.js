"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Groups = exports._Groups = exports.Group = exports._Group = exports.GroupType = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var odata_1 = require("@pnp/odata-commonjs");
var graphqueryable_js_1 = require("../graphqueryable.js");
var decorators_js_1 = require("../decorators.js");
var operations_js_1 = require("../operations.js");
var types_js_1 = require("../directory-objects/types.js");
var GroupType;
(function (GroupType) {
    /**
     * Office 365 (aka unified group)
     */
    GroupType[GroupType["Office365"] = 0] = "Office365";
    /**
     * Dynamic membership
     */
    GroupType[GroupType["Dynamic"] = 1] = "Dynamic";
    /**
     * Security
     */
    GroupType[GroupType["Security"] = 2] = "Security";
})(GroupType = exports.GroupType || (exports.GroupType = {}));
/**
 * Represents a group entity
 */
var _Group = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Group, _super);
    function _Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups
     */
    _Group.prototype.addFavorite = function () {
        return (0, operations_js_1.graphPost)(this.clone(exports.Group, "addFavorite"));
    };
    /**
     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups
     */
    _Group.prototype.removeFavorite = function () {
        return (0, operations_js_1.graphPost)(this.clone(exports.Group, "removeFavorite"));
    };
    /**
     * Reset the unseenCount of all the posts that the current user has not seen since their last visit
     */
    _Group.prototype.resetUnseenCount = function () {
        return (0, operations_js_1.graphPost)(this.clone(exports.Group, "resetUnseenCount"));
    };
    /**
     * Calling this method will enable the current user to receive email notifications for this group,
     * about new posts, events, and files in that group. Supported for only Office 365 groups
     */
    _Group.prototype.subscribeByMail = function () {
        return (0, operations_js_1.graphPost)(this.clone(exports.Group, "subscribeByMail"));
    };
    /**
     * Calling this method will prevent the current user from receiving email notifications for this group
     * about new posts, events, and files in that group. Supported for only Office 365 groups
     */
    _Group.prototype.unsubscribeByMail = function () {
        return (0, operations_js_1.graphPost)(this.clone(exports.Group, "unsubscribeByMail"));
    };
    /**
     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group
     *
     * @param start Start date and time of the time range
     * @param end End date and time of the time range
     */
    _Group.prototype.getCalendarView = function (start, end) {
        var view = this.clone(exports.Group, "calendarView");
        view.query.set("startDateTime", start.toISOString());
        view.query.set("endDateTime", end.toISOString());
        return view();
    };
    _Group = (0, tslib_1.__decorate)([
        (0, decorators_js_1.deleteable)(),
        (0, decorators_js_1.updateable)()
    ], _Group);
    return _Group;
}(types_js_1._DirectoryObject));
exports._Group = _Group;
exports.Group = (0, graphqueryable_js_1.graphInvokableFactory)(_Group);
/**
 * Describes a collection of Field objects
 *
 */
var _Groups = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Groups, _super);
    function _Groups() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new group as specified in the request body.
     *
     * @param name Name to display in the address book for the group
     * @param mailNickname Mail alias for the group
     * @param groupType Type of group being created
     * @param additionalProperties A plain object collection of additional properties you want to set on the new group
     */
    _Groups.prototype.add = function (name, mailNickname, groupType, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, common_1.assign)({
                            displayName: name,
                            mailEnabled: groupType === GroupType.Office365,
                            mailNickname: mailNickname,
                            securityEnabled: groupType !== GroupType.Office365,
                        }, additionalProperties);
                        // include a group type if required
                        if (groupType !== GroupType.Security) {
                            postBody = (0, common_1.assign)(postBody, {
                                groupTypes: groupType === GroupType.Office365 ? ["Unified"] : ["DynamicMembership"],
                            });
                        }
                        return [4 /*yield*/, (0, operations_js_1.graphPost)(this, (0, odata_1.body)(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                group: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Groups = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("groups"),
        (0, decorators_js_1.getById)(exports.Group)
    ], _Groups);
    return _Groups;
}(graphqueryable_js_1._GraphQueryableSearchableCollection));
exports._Groups = _Groups;
exports.Groups = (0, graphqueryable_js_1.graphInvokableFactory)(_Groups);
//# sourceMappingURL=types.js.map