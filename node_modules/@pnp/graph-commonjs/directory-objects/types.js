"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectoryObjectTypes = exports.DirectoryObjects = exports._DirectoryObjects = exports.DirectoryObject = exports._DirectoryObject = void 0;
var tslib_1 = require("tslib");
var graphqueryable_js_1 = require("../graphqueryable.js");
var decorators_js_1 = require("../decorators.js");
var odata_1 = require("@pnp/odata-commonjs");
var operations_js_1 = require("../operations.js");
/**
 * Represents a Directory Object entity
 */
var _DirectoryObject = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_DirectoryObject, _super);
    function _DirectoryObject() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
   * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive
   *
   * @param securityEnabledOnly
   */
    _DirectoryObject.prototype.getMemberObjects = function (securityEnabledOnly) {
        if (securityEnabledOnly === void 0) { securityEnabledOnly = false; }
        return (0, operations_js_1.graphPost)(this.clone(exports.DirectoryObject, "getMemberObjects"), (0, odata_1.body)({ securityEnabledOnly: securityEnabledOnly }));
    };
    /**
   * Returns all the groups that the specified Directory Object is a member of. The check is transitive
   *
   * @param securityEnabledOnly
   */
    _DirectoryObject.prototype.getMemberGroups = function (securityEnabledOnly) {
        if (securityEnabledOnly === void 0) { securityEnabledOnly = false; }
        return (0, operations_js_1.graphPost)(this.clone(exports.DirectoryObject, "getMemberGroups"), (0, odata_1.body)({ securityEnabledOnly: securityEnabledOnly }));
    };
    /**
   * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member.
   * This function is transitive.
   * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.
   */
    _DirectoryObject.prototype.checkMemberGroups = function (groupIds) {
        return (0, operations_js_1.graphPost)(this.clone(exports.DirectoryObject, "checkMemberGroups"), (0, odata_1.body)({ groupIds: groupIds }));
    };
    _DirectoryObject = (0, tslib_1.__decorate)([
        (0, decorators_js_1.deleteable)()
    ], _DirectoryObject);
    return _DirectoryObject;
}(graphqueryable_js_1._GraphQueryableInstance));
exports._DirectoryObject = _DirectoryObject;
exports.DirectoryObject = (0, graphqueryable_js_1.graphInvokableFactory)(_DirectoryObject);
/**
 * Describes a collection of Directory Objects
 *
 */
var _DirectoryObjects = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_DirectoryObjects, _super);
    function _DirectoryObjects() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
  * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties.
  * The $select query option is not available for this operation.
  *
  * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.
  * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.
  */
    _DirectoryObjects.prototype.getByIds = function (ids, type) {
        if (type === void 0) { type = DirectoryObjectTypes.directoryObject; }
        return (0, operations_js_1.graphPost)(this.clone(exports.DirectoryObjects, "getByIds"), (0, odata_1.body)({ ids: ids, type: type }));
    };
    _DirectoryObjects = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("directoryObjects"),
        (0, decorators_js_1.getById)(exports.DirectoryObject)
    ], _DirectoryObjects);
    return _DirectoryObjects;
}(graphqueryable_js_1._GraphQueryableCollection));
exports._DirectoryObjects = _DirectoryObjects;
exports.DirectoryObjects = (0, graphqueryable_js_1.graphInvokableFactory)(_DirectoryObjects);
/**
 * DirectoryObjectTypes
 */
var DirectoryObjectTypes;
(function (DirectoryObjectTypes) {
    /**
   * Directory Objects
   */
    DirectoryObjectTypes[DirectoryObjectTypes["directoryObject"] = 0] = "directoryObject";
    /**
   * User
   */
    DirectoryObjectTypes[DirectoryObjectTypes["user"] = 1] = "user";
    /**
   * Group
   */
    DirectoryObjectTypes[DirectoryObjectTypes["group"] = 2] = "group";
    /**
   * Device
   */
    DirectoryObjectTypes[DirectoryObjectTypes["device"] = 3] = "device";
})(DirectoryObjectTypes = exports.DirectoryObjectTypes || (exports.DirectoryObjectTypes = {}));
//# sourceMappingURL=types.js.map