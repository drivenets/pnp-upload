"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscriptions = exports._Subscriptions = exports.Subscription = exports._Subscription = void 0;
var tslib_1 = require("tslib");
var graphqueryable_js_1 = require("../graphqueryable.js");
var common_1 = require("@pnp/common-commonjs");
var odata_1 = require("@pnp/odata-commonjs");
var decorators_js_1 = require("../decorators.js");
var operations_js_1 = require("../operations.js");
/**
 * Subscription
 */
var _Subscription = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Subscription, _super);
    function _Subscription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Subscription = (0, tslib_1.__decorate)([
        (0, decorators_js_1.deleteable)(),
        (0, decorators_js_1.updateable)()
    ], _Subscription);
    return _Subscription;
}(graphqueryable_js_1._GraphQueryableInstance));
exports._Subscription = _Subscription;
exports.Subscription = (0, graphqueryable_js_1.graphInvokableFactory)(_Subscription);
/**
 * Subscriptions
 */
var _Subscriptions = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Subscriptions, _super);
    function _Subscriptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Subscription.
     *
     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.
     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.
     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).
     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.
     * @param props A plain object collection of additional properties you want to set on the new subscription
     *
     */
    _Subscriptions.prototype.add = function (changeType, notificationUrl, resource, expirationDateTime, props) {
        if (props === void 0) { props = {}; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, common_1.assign)({
                            changeType: changeType,
                            expirationDateTime: expirationDateTime,
                            notificationUrl: notificationUrl,
                            resource: resource,
                        }, props);
                        return [4 /*yield*/, (0, operations_js_1.graphPost)(this, (0, odata_1.body)(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                subscription: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Subscriptions = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("subscriptions"),
        (0, decorators_js_1.getById)(exports.Subscription)
    ], _Subscriptions);
    return _Subscriptions;
}(graphqueryable_js_1._GraphQueryableCollection));
exports._Subscriptions = _Subscriptions;
exports.Subscriptions = (0, graphqueryable_js_1.graphInvokableFactory)(_Subscriptions);
//# sourceMappingURL=types.js.map