import { __awaiter, __generator } from "tslib";
import { validateProviderHostedRequestToken, getAddInOnlyAccessToken, getUserAccessToken } from "./sptokenutils.js";
var ProviderHostedRequestContext = /** @class */ (function () {
    function ProviderHostedRequestContext(siteUrl, clientId, clientSecret, realm, refreshToken, stsUri, cacheKey) {
        this.siteUrl = siteUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.realm = realm;
        this.refreshToken = refreshToken;
        this.stsUri = stsUri;
        this.cacheKey = cacheKey;
    }
    ProviderHostedRequestContext.create = function (siteUrl, clientId, clientSecret, spAppToken) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, appctx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, validateProviderHostedRequestToken(spAppToken, clientSecret)];
                    case 1:
                        payload = _a.sent();
                        appctx = JSON.parse(payload.appctx);
                        return [2 /*return*/, new ProviderHostedRequestContext(siteUrl, clientId, clientSecret, payload.iss.split("@")[1], payload.refreshtoken, appctx.SecurityTokenServiceUri, appctx.CacheKey)];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getAddInOnlyConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.getConfigOptions;
                        return [4 /*yield*/, getAddInOnlyAccessToken(this.siteUrl, this.clientId, this.clientSecret, this.realm, this.stsUri)];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getUserConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.getConfigOptions;
                        return [4 /*yield*/, getUserAccessToken(this.siteUrl, this.clientId, this.clientSecret, this.refreshToken, this.realm, this.stsUri, this.cacheKey)];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getConfigOptions = function (token) {
        return {
            headers: {
                "Authorization": "Bearer " + token.access_token,
            },
        };
    };
    return ProviderHostedRequestContext;
}());
export { ProviderHostedRequestContext };
//# sourceMappingURL=providerhosted.js.map