import { __awaiter, __generator } from "tslib";
import { combine, isUrlAbsolute } from "@pnp/common";
import { NodeFetchClient } from "./nodefetchclient.js";
import { getAddInOnlyAccessToken } from "../sptokenutils.js";
import { SPOAuthEnv } from "../types.js";
/**
 * Fetch client for use within nodejs, requires you register a client id and secret with app only permissions.
 *
 * See either the MSAL client or ADAL client for more modern options
 */
var SPFetchClient = /** @class */ (function () {
    function SPFetchClient(siteUrl, _clientId, _clientSecret, authEnv, _realm, _fetchClient) {
        if (authEnv === void 0) { authEnv = SPOAuthEnv.SPO; }
        if (_realm === void 0) { _realm = ""; }
        if (_fetchClient === void 0) { _fetchClient = new NodeFetchClient(); }
        this.siteUrl = siteUrl;
        this._clientId = _clientId;
        this._clientSecret = _clientSecret;
        this.authEnv = authEnv;
        this._realm = _realm;
        this._fetchClient = _fetchClient;
        this.token = null;
    }
    SPFetchClient.prototype.fetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var realm, authUrl, token, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRealm()];
                    case 1:
                        realm = _a.sent();
                        return [4 /*yield*/, this.getAuthUrl(realm)];
                    case 2:
                        authUrl = _a.sent();
                        return [4 /*yield*/, getAddInOnlyAccessToken(this.siteUrl, this._clientId, this._clientSecret, realm, authUrl)];
                    case 3:
                        token = _a.sent();
                        options.headers.set("Authorization", "Bearer " + token.access_token);
                        if (!options.headers.has("User-Agent")) {
                            // this marks the requests for understanding by the service
                            options.headers.append("User-Agent", "NONISV|SharePointPnP|PnPjs");
                        }
                        uri = !isUrlAbsolute(url) ? combine(this.siteUrl, url) : url;
                        return [2 /*return*/, this._fetchClient.fetch(uri, options)];
                }
            });
        });
    };
    SPFetchClient.prototype.getAuthHostUrl = function (env) {
        switch (env) {
            case SPOAuthEnv.China:
                return "accounts.accesscontrol.chinacloudapi.cn";
            case SPOAuthEnv.Germany:
                return "login.microsoftonline.de";
            default:
                return "accounts.accesscontrol.windows.net";
        }
    };
    SPFetchClient.prototype.getRealm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, r, data, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._realm.length > 0) {
                            return [2 /*return*/, Promise.resolve(this._realm)];
                        }
                        url = combine(this.siteUrl, "_vti_bin/client.svc");
                        return [4 /*yield*/, this._fetchClient.fetch(url, {
                                "headers": {
                                    "Authorization": "Bearer ",
                                },
                                "method": "POST",
                            })];
                    case 1:
                        r = _a.sent();
                        data = r.headers.get("www-authenticate") || "";
                        index = data.indexOf("Bearer realm=\"");
                        this._realm = data.substring(index + 14, index + 50);
                        return [2 /*return*/, this._realm];
                }
            });
        });
    };
    SPFetchClient.prototype.getAuthUrl = function (realm) {
        return __awaiter(this, void 0, void 0, function () {
            var url, r, json, eps;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "https://" + this.getAuthHostUrl(this.authEnv) + "/metadata/json/1?realm=" + realm;
                        return [4 /*yield*/, this._fetchClient.fetch(url, { method: "GET" })];
                    case 1:
                        r = _a.sent();
                        return [4 /*yield*/, r.json()];
                    case 2:
                        json = _a.sent();
                        eps = json.endpoints.filter(function (ep) { return ep.protocol === "OAuth2"; });
                        if (eps.length > 0) {
                            return [2 /*return*/, eps[0].location];
                        }
                        throw Error("Auth URL Endpoint could not be determined from data.");
                }
            });
        });
    };
    return SPFetchClient;
}());
export { SPFetchClient };
//# sourceMappingURL=spfetchclient.js.map