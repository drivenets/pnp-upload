import { AuthenticationContext } from "adal-node";
import { combine, objectDefinedNotNull, isUrlAbsolute, assign, } from "@pnp/common";
import { fetch } from "./fetch.js";
var AdalFetchClient = /** @class */ (function () {
    function AdalFetchClient(_tenant, _clientId, _secret, _resource, _authority) {
        if (_resource === void 0) { _resource = "https://graph.microsoft.com"; }
        if (_authority === void 0) { _authority = "https://login.windows.net"; }
        this._tenant = _tenant;
        this._clientId = _clientId;
        this._secret = _secret;
        this._resource = _resource;
        this._authority = _authority;
        this.authContext = new AuthenticationContext(combine(this._authority, this._tenant));
    }
    AdalFetchClient.prototype.fetch = function (url, options) {
        if (!objectDefinedNotNull(options)) {
            options = {
                headers: new Headers(),
            };
        }
        else if (!objectDefinedNotNull(options.headers)) {
            options = assign(options, {
                headers: new Headers(),
            });
        }
        if (!isUrlAbsolute(url)) {
            url = combine(this._resource, url);
        }
        return this.acquireToken().then(function (token) {
            options.headers.set("Authorization", token.tokenType + " " + token.accessToken);
            return fetch(url, options);
        });
    };
    AdalFetchClient.prototype.acquireToken = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.authContext.acquireTokenWithClientCredentials(_this._resource, _this._clientId, _this._secret, function (err, token) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(token);
                }
            });
        });
    };
    return AdalFetchClient;
}());
export { AdalFetchClient };
//# sourceMappingURL=adalfetchclient.js.map